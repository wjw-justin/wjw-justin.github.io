{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"LeetCode-第1题","slug":"LeetCode-第1题","date":"2020-05-30T14:22:32.000Z","updated":"2020-05-30T14:37:32.000Z","comments":true,"path":"2020/05/30/LeetCode-第1题/","link":"","permalink":"http://yoursite.com/2020/05/30/LeetCode-%E7%AC%AC1%E9%A2%98/","excerpt":"","text":"求两数之和 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的 那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例： 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 方法一：暴力法 暴力法很简单，遍历每个元素 xx，并查找是否存在一个值与 target−x相等的 目标元 素。 123456789101112class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = i + 1; j &lt; nums.length; j++) &#123; if (nums[j] == target - nums[i]) &#123; return new int[] &#123; i, j &#125;; &#125; &#125; &#125; throw new IllegalArgumentException(\"No two sum solution\");//抛出新的非法数据异常 &#125; 复杂度分析： 时间复杂度：O(n^2)：对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗 费O(n)的时间。因此时间复杂度为O(n^2) 空间复杂度：O(1) 方法二：两遍哈希表 为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。 通过以空间换取速度的方式，我们可以将查找时间从 O(n) 降低到 O(1)。哈希表正是为此目的而构建的，它支持以近似恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到 O(n)。但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为O(1)。 一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target−nums[i]）是否存在于表中。注意，该目标元素不能是 nums[i] 本身！ 123456789101112131415class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; map.put(nums[i], i); &#125; for (int i = 0; i &lt; nums.length; i++) &#123; int complement = target - nums[i]; if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123; return new int[] &#123; i, map.get(complement) &#125;; &#125; &#125; throw new IllegalArgumentException(\"No two sum solution\"); &#125;&#125; 时间复杂度：O(n) 我们把包含有 n个元素的列表遍历两次。由于哈希表将查找时间缩短到 O(1) ，所以 时间复杂度为 O(n)。 空间复杂度：O(n) 所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 n个元素。 方法三：一遍哈希表 事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。 12345678910111213class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; int complement = target - nums[i]; if (map.containsKey(complement)) &#123; return new int[] &#123; map.get(complement), i &#125;; &#125; map.put(nums[i], i); &#125; throw new IllegalArgumentException(\"No two sum solution\"); &#125;&#125; 时间复杂度：O(n) 我们只遍历了包含有n 个元素的列表一次。在表中进行的每次查找只花费 O(1) 的时间。 空间复杂度：O(n) 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 n 个元素。","categories":[],"tags":[]},{"title":"mac配置hexo（保姆级）","slug":"mac配置hexo（保姆级）","date":"2020-05-30T11:13:49.000Z","updated":"2020-05-31T01:27:01.000Z","comments":true,"path":"2020/05/30/mac配置hexo（保姆级）/","link":"","permalink":"http://yoursite.com/2020/05/30/mac%E9%85%8D%E7%BD%AEhexo%EF%BC%88%E4%BF%9D%E5%A7%86%E7%BA%A7%EF%BC%89/","excerpt":"","text":"第一步 配置Node.js 下载地址: nodejs.org 下载完事之后，就一直下一步下一步下一步……就安装完事了 第二步 在终端中进行神奇操作 进入root用户： 输入密码（当然，密码是隐藏的，你看不到） 12$ sudo suPassword：****** 进入root用户之后，我们先查询一下node版本 1node -v 再用同样的方式查看包管理器的版本 1npm -v 第三步 安装hexo的结构框架 由于国内的镜像源安装非常慢，所以我们利用npm来安装一个cnpm(淘宝源) 1npm install -g cnpm --registry=https://registry.npm.taobao.prg 习惯性动作查看cnpm的版本号 1cnpm -v 这个时候我们用cnpm来安装hexo博客的框架 1cnpm install -g hexo-cli 产看一下hexo的基本信息 1hexo -v 第四步 使用hexo正式搭建博客 在终端中找到一个比较顺眼的位置，来建立一个文件夹blog 1mkdir blog 以后所有和博客相关的文件等等存放在这个文件夹中，天有不测风云，如果出现问题，咱们直接把这个文件夹删除了，大不了从头再来。 接下来我们在blog这个目录下进行操作。 现在我们用hexo初始化一个博客。 1sudo hexo init 这时我们发现在我们创建的blog的文件夹中出现了很多文件。 现在我们来启动我们的博客。（主要是在我们平常写博客时预览一下） 1hexo s 这时候给我们一个本地服务器的端口 1Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+c to stop 我们把地址复制到浏览器上，就可以打开我们刚刚初始化的博客。 万众瞩目的时间到了！！！我们现在开始写自己的第一篇博客！！！ 1hexo n \"我的第一篇博客\" 当然第一篇博客的位置在 1***/blog/source/_post/我的第一篇博客.md 这时我们打开这个文件可以用vim简单的编辑一下内容。 这时候我们就建立好我们的博客了，但是需要生成一下，是在blog的目录下进行操作的。 首先清理一下 1hexo clean 下一步生成一下博客 1hexo g 这时我们重新启动一下hexo 1hexo s 做到这里我们就成功一半了，至少我们的博客显示在本地服务器上了 第五步 将我们的博客部署到GitHub上公开使用 我们可以使用免费的部署工具：GitHub 怎么去注册GitHub这里就不在进行赘述了。 重点：我们部署个人博客的GitHub仓库的命名必须符合特定要求才行，比如说我的就是。(用你的GitHub用户名就行) 1wjw-justin.github.io 后续在浏览器上输入这个地址就可以访问我的博客。 这个时候我们要去终端中blog目录下装一个插件 1cnpm install --save hexo-deployer-git 有个关键点需要设置一下，在_config,yml用vim打开进行设置。在文件的最底部进行设置。 1234type: git /*需要我们GitHub上的仓库地址*/repo: https://github.com/wjw-justin/wjw-justin.github.io.gitbranch: master 准备就绪后，我们将博客部署到远端，命令非常简单。 1hexo d 这个时候输入我们GitHub的账号和密码。 这个时候我们就会在你自己的仓库地址上看到重新部署的博客。 散会！！！","categories":[],"tags":[]}],"categories":[],"tags":[]}